## -- –ì–ª–∞–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã -- ##

from aiogram import Router, types # –†–æ—É—Ç–µ—Ä—ã (–≥–ª. —Ö—ç–Ω–¥–ª–µ—Ä—ã) –∏ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–∏ÃÜ
from aiogram.types import CallbackQuery, FSInputFile # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü.—Ç–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –ø–æ –∫–ª–∞–≤–∏—à–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
from aiogram import F # –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
from utils.texts import get_message_by, get_game_message_by # –§—É–Ω–∫—Ü–∏—è –ø–æ –∑–∞—Ö–≤–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (—Å–æ–æ–±—â–µ–Ω–∏–π)
from keyboards.builders import keyboard_return, game_keyboard # –ë–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import utils.special_massive as SMV # –ù–µ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–µ—Ü.–º–∞—Å—Å–∏–≤—ã

from aiogram.filters import StateFilter # –§–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.context import FSMContext # –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
from middlewares.storage import UserLoreRead # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM

from config import db, config # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

## -- –ì–ª–∞–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã -- ##

router = Router()

@router.callback_query(F.data.startswith('welcome_start_'))
async def read_welcome_start(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[2]
    data, check_reg = await db.get_info_user(user_id)
    if user_id == int(cuser_id):
        await state.set_state(state=None)
        user_data = await state.get_data()
        if check_reg == False:
            try:
                if user_data['lore_read']:
                    await callback.message.edit_text(get_message_by('welcome'), reply_markup=keyboard_return('welcome', user_id, 1))
                else:
                    await callback.message.edit_text(get_message_by('welcome'), reply_markup=keyboard_return('welcome', user_id))
            except KeyError:
                await callback.message.edit_text(get_message_by('welcome'), reply_markup=keyboard_return('welcome', user_id))
        else:
            await callback.message.edit_text(get_message_by('main', data), reply_markup=keyboard_return('main', user_id))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('read_lore_game_'))
async def read_lore_game(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[3]
    if user_id == int(cuser_id):
        await callback.message.edit_text(get_message_by('lore_0'), reply_markup=keyboard_return('lore_game', user_id, 1))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('lore_game_1_'))
async def read_lore_game_1(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[3]
    if user_id == int(cuser_id):
        await callback.message.edit_text(get_message_by('lore_0'), reply_markup=keyboard_return('lore_game', user_id, 1))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('lore_game_2_'), StateFilter(None))
async def read_lore_game_2(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[3]
    if user_id == int(cuser_id):
        await callback.message.edit_text(get_message_by('lore_1'), reply_markup=keyboard_return('lore_game', user_id, 2))
        await state.set_state(UserLoreRead.read)
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('confirm_lore_'), StateFilter(UserLoreRead.read))
async def read_confirm_lore(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[2]
    if user_id == int(cuser_id):
        await callback.message.edit_text('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –ª–æ—Ä. –¢–µ–ø–µ—Ä—å –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è \n‚ö° –¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–∞–∑–¥–µ–ª <b>–ò–≥—Ä–æ–≤—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏</b>, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –Ω–∞ –ì–ª–∞–≤–Ω–æ–π.', reply_markup=keyboard_return('lore_game', user_id, 3))
        await state.update_data(lore_read=True)
        await state.set_state(state=None)
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('game_mechanics_'))
async def read_game_mechanics(callback: CallbackQuery):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[2]
    if user_id == int(cuser_id):
        await callback.message.edit_text(get_message_by('game_mechanics'), reply_markup=keyboard_return('game_mechanics', user_id, 0))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.in_(SMV.game_mechanics_ids))
async def read_game_mechanic_any(callback: CallbackQuery):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[3]
    if user_id == int(cuser_id):
        await callback.message.edit_text(get_message_by(callback.data), reply_markup=keyboard_return('game_mechanics', user_id, 1))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

## –ì–ª–∞–≤–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ë–î ##
@router.callback_query(F.data.startswith('registration_'))
async def read_registration(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_data = await state.get_data()
    cuser_id = callback.data.split('_')[1]
    if user_id == int(cuser_id):
        try:
            data, check_reg = await db.get_info_user(user_id)
            if check_reg == False:
                tdata = callback.from_user.username
                await db.register_user(user_id=user_id, tg_username=tdata, nickname=callback.from_user.first_name)
                await callback.message.edit_text(get_message_by('complete_reg', tdata), reply_markup=keyboard_return('complete_reg', user_id))
            else:
                await callback.message.edit_text('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.', reply_markup=keyboard_return('static', user_id))
        except KeyError:
            await callback.message.edit_text('–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –ª–æ—Ä–∞: ‚ùå', reply_markup=keyboard_return('static', user_id))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

## –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
@router.callback_query(F.data.startswith('get_inventory_'))
async def read_inventory(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[2]
    data, keys_items = await db.show_inventory(user_id)
    if user_id == int(cuser_id):
        await callback.message.edit_text(get_message_by('inventory', data), reply_markup=keyboard_return('inventory', user_id, 'reqitems', keys_items))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('inventory_item_select_'))
async def read_inventory_item_select(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[3]
    item_id = callback.data.split('_')[4]
    #data, keys_items = await db.show_inventory(user_id)
    data = await db.get_info_item(item_id)
    if user_id == int(cuser_id):
        await callback.message.edit_text(get_message_by('item_info_inv', data), reply_markup=keyboard_return('inventory', user_id, 'item_info', data))
        #await callback.message.edit_text(get_message_by('item_info', item_id), reply_markup=keyboard_return('item_info', user_id, item_id))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')