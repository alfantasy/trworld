## -- –ì–ª–∞–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã -- ##

from aiogram import Router, types ## –†–æ—É—Ç–µ—Ä—ã (–≥–ª. —Ö—ç–Ω–¥–ª–µ—Ä—ã) –∏ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.types import CallbackQuery # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü.—Ç–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ Callback
from aiogram.types import FSInputFile # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
from aiogram import F # –ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
from utils.texts import get_game_message_by, get_message_by # –§—É–Ω–∫—Ü–∏—è –ø–æ –∑–∞—Ö–≤–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
from keyboards.builders import game_keyboard, keyboard_return # –ë–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

import utils.special_massive as SMV # –ù–µ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–µ—Ü.–º–∞—Å—Å–∏–≤—ã

from aiogram.filters import StateFilter # –§–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.context import FSMContext # –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM

from config import db, config # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

## -- –ì–ª–∞–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã -- ##

router = Router()

## –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å ##

@router.callback_query(F.data.startswith('gotoworld_'))
async def read_gotoworld(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[1]
    current_quest_id = await db.get_current_quest_id(user_id)
    if user_id == int(cuser_id):
        if current_quest_id == 0 or current_quest_id == None:
            #await callback.message.edit_text(get_message_by('gotoworld'), reply_markup=keyboard_return('gotoworld', user_id))
            await callback.message.answer(get_message_by('start_game_first'), reply_markup=game_keyboard('start_game_first', user_id, None))
        else:
            ...
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('start_game_first_'))
async def read_start_game_first(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[3]
    if user_id == int(cuser_id):
        await callback.message.delete()
        await callback.message.answer(get_message_by('start_game_first'), reply_markup=game_keyboard('start_game_first', user_id, None))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

@router.callback_query(F.data.startswith('prology_0_'))
async def read_prology_0(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    cuser_id = callback.data.split('_')[2]
    data = await db.get_location(1)
    if user_id == int(cuser_id):
        await callback.message.delete()
        msg_id = await callback.message.answer_photo(photo=config["IMAGES"]["bereg"], caption=get_game_message_by('prology_0', data), reply_markup=game_keyboard('start_game_first', user_id, 'prology_0'))
        #await callback.message.edit_text(get_game_message_by('prology_0'), reply_markup=game_keyboard('prology_0', user_id))
    else:
        await callback.answer('üö´ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª—è –í–∞—Å.')

## –ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å ##